# Shaka Team Triage Party - Config

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Uses Shaka team's common label structure defined in
# go/shaka-github-labels-design


settings:
  name: Shaka Triage
  repos:
    - https://github.com/shaka-project/shaka-packager
    - https://github.com/shaka-project/shaka-player
    - https://github.com/shaka-project/shaka-player-embedded
    - https://github.com/shaka-project/shaka-streamer
    - https://github.com/shaka-project/eme-encryption-scheme-polyfill
    - https://github.com/shaka-project/generic-webdriver-server
    - https://github.com/shaka-project/static-ffmpeg-binaries
    - https://github.com/shaka-project/eme_logger
    - https://github.com/shaka-project/trace-anything
    - https://github.com/shaka-project/karma-local-wd-launcher
    - https://github.com/shaka-project/webdriver-installer
    - https://github.com/shaka-project/shaka-github-tools
    - https://github.com/shaka-project/triage-party-config

  # From 0-1, how similar issues must be to be tagged as "similar"
  min_similarity: 0.75

  # Which roles are considered members of the project?
  member-roles:
    - member # of the org that owns the project
    - collaborator
    - owner

  # Hard-coded "members" of the team, who do not fit into member-roles above.
  members: []


# Lists of rules for the various project tabs, factored out and reused.
triage-rules: &triage-rules
  - issue-needs-type
  - issue-needs-priority
  - question-needs-answer
  # TODO: It may be nice to add components to everything down the line.
  # For now, it's not critical, and there's a huge backlog.
  #- issue-needs-component
  - pr-ready-to-merge
  - pr-needs-review

fix-rules: &fix-rules
  - assigned-issues
  - unassigned-p0-issues
  - unassigned-p1-issues
  - unassigned-p2-issues
  - unassigned-p3-issues
  - unassigned-p4-issues

cleanup-rules: &cleanup-rules
  - issues-maybe-ready-to-close
  - announcements

cleanup-description: &cleanup-description |
  A clean tracker is a happy tracker!

  Please check these issues that may need to be cleaned up.

velocity-rules: &velocity-rules
  - recently-closed-issues


# Lists of repos for the various project tabs, factored out and reused.
player-repos: &player-repos
  - https://github.com/shaka-project/shaka-player
  - https://github.com/shaka-project/eme-encryption-scheme-polyfill
  - https://github.com/shaka-project/karma-local-wd-launcher
  - https://github.com/shaka-project/webdriver-installer

embedded-repos: &embedded-repos
  - https://github.com/shaka-project/shaka-player-embedded

packager-repos: &packager-repos
  - https://github.com/shaka-project/shaka-packager

streamer-repos: &streamer-repos
  - https://github.com/shaka-project/shaka-streamer
  - https://github.com/shaka-project/static-ffmpeg-binaries

infra-repos: &infra-repos
  - https://github.com/shaka-project/generic-webdriver-server
  - https://github.com/shaka-project/shaka-github-tools
  - https://github.com/shaka-project/triage-party-config

logger-repos: &logger-repos
  - https://github.com/shaka-project/eme_logger
  - https://github.com/shaka-project/trace-anything


collections:
  - id: player-triage
    category: Player
    name: Triage
    velocity: player-velocity
    rules: *triage-rules
    repos: *player-repos

  - id: player-fix
    category: Player
    name: Fix
    velocity: player-velocity
    rules: *fix-rules
    repos: *player-repos

  - id: player-cleanup
    category: Player
    name: Cleanup
    velocity: player-velocity
    description: *cleanup-description
    rules: *cleanup-rules
    repos: *player-repos

  - id: player-velocity
    name: Velocity (hidden)
    used_for_statistics: true
    hidden: true
    rules: *velocity-rules
    repos: *player-repos


  - id: packager-triage
    category: Packager
    name: Triage
    velocity: packager-velocity
    rules: *triage-rules
    repos: *packager-repos

  - id: packager-fix
    category: Packager
    name: Fix
    velocity: packager-velocity
    rules: *fix-rules
    repos: *packager-repos

  - id: packager-cleanup
    category: Packager
    name: Cleanup
    velocity: packager-velocity
    description: *cleanup-description
    rules: *cleanup-rules
    repos: *packager-repos

  - id: packager-velocity
    name: Velocity (hidden)
    used_for_statistics: true
    hidden: true
    rules: *velocity-rules
    repos: *packager-repos


  - id: embedded-triage
    category: Embedded
    name: Triage
    velocity: embedded-velocity
    rules: *triage-rules
    repos: *embedded-repos

  - id: embedded-fix
    category: Embedded
    name: Fix
    velocity: embedded-velocity
    rules: *fix-rules
    repos: *embedded-repos

  - id: embedded-cleanup
    category: Embedded
    name: Cleanup
    velocity: embedded-velocity
    description: *cleanup-description
    rules: *cleanup-rules
    repos: *embedded-repos

  - id: embedded-velocity
    name: Velocity (hidden)
    used_for_statistics: true
    hidden: true
    rules: *velocity-rules
    repos: *embedded-repos


  - id: streamer-triage
    category: Streamer
    name: Triage
    velocity: streamer-velocity
    rules: *triage-rules
    repos: *streamer-repos

  - id: streamer-fix
    category: Streamer
    name: Fix
    velocity: streamer-velocity
    rules: *fix-rules
    repos: *streamer-repos

  - id: streamer-cleanup
    category: Streamer
    name: Cleanup
    velocity: streamer-velocity
    description: *cleanup-description
    rules: *cleanup-rules
    repos: *streamer-repos

  - id: streamer-velocity
    name: Velocity (hidden)
    used_for_statistics: true
    hidden: true
    rules: *velocity-rules
    repos: *streamer-repos


  - id: infra-triage
    category: Infra
    name: Triage
    velocity: infra-velocity
    rules: *triage-rules
    repos: *infra-repos

  - id: infra-fix
    category: Infra
    name: Fix
    velocity: infra-velocity
    rules: *fix-rules
    repos: *infra-repos

  - id: infra-cleanup
    category: Infra
    name: Cleanup
    velocity: infra-velocity
    description: *cleanup-description
    rules: *cleanup-rules
    repos: *infra-repos

  - id: infra-velocity
    name: Velocity (hidden)
    used_for_statistics: true
    hidden: true
    rules: *velocity-rules
    repos: *infra-repos


  - id: logger-triage
    category: Logger
    name: Triage
    velocity: logger-velocity
    rules: *triage-rules
    repos: *logger-repos

  - id: logger-fix
    category: Logger
    name: Fix
    velocity: logger-velocity
    rules: *fix-rules
    repos: *logger-repos

  - id: logger-cleanup
    category: Logger
    name: Cleanup
    velocity: logger-velocity
    description: *cleanup-description
    rules: *cleanup-rules
    repos: *logger-repos

  - id: logger-velocity
    name: Velocity (hidden)
    used_for_statistics: true
    hidden: true
    rules: *velocity-rules
    repos: *logger-repos


# A long bit of text, factored out and re-used in the rules below.
bug-resolution-text: &bug-resolution-text |
    Fix bugs!  This is the "fun" part.

    1. Try to reproduce the issue.  Some options for repro:
      • Use the demo's "custom content" tab
      • Write a new unit or integration test to simulate the scenario in the report
        • This lets you run tests in the lab on non-desktop browsers

    2. If the issue cannot be reproduced, set "status: unable to reproduce"

    3. Once the issue can be reproduced, try to fix it or assign it to someone who can


rules:
  issue-needs-type:
    name: "Untyped Issues"
    resolution: |
        Please add a type label.

        (You do not need to reproduce the issue yet.  At this stage, assume that bug reports are correct.)

    type: issue
    filters:
      # Has no type
      - label: "!type: .*"
      # And no status (open issues with a status show up in the cleanup tab)
      - label: "!status: .*"

  issue-needs-priority:
    name: "Unprioritized Issues"
    resolution: |
        Please add a priority label.

        (Make an initial assessment.  It doesn't have to be perfect.)

        Tips for assessing priority:
          • If it's an enhancement, it is almost always a P2 or lower
          • If it's a bug, it is usually a P1 or P2
          • Read the descriptions of each priority label on GitHub to help you decide

    type: issue
    filters:
      - label: "!priority: .*"
      # Has a type...
      - label: "type: .*"
      # But not one of these, which do not need priorities.
      - label: "!type: (announcement|external|process|question)"
      # And if it already has a status, it doesn't need a priority.
      - label: "!status: .*"

  issue-needs-component:
    name: "Issues without a Component"
    resolution: |
        Please add at least one component label.

        (Make an initial assessment.  It doesn't have to be perfect.)

    type: issue
    filters:
      - label: "!component: .*"
      # Has a type...
      - label: "type: .*"
      # But not one of these, which do not need components.
      - label: "!type: (announcement|CI|code health|docs|external|process|question)"

  question-needs-answer:
    name: "Unanswered questions"
    resolution: |
        Please answer as best you can.

        You may ping your teammates if you need help finding information, but
        try to be the one to track down that info and leave the answer on
        GitHub.  Every answer you dig up for someone else is one more thing
        you've learned for yourself.

    type: issue
    filters:
      - label: "type: question"
      # The most recent comment was not from a member of the project.
      - tag: "!(member-last|owner-last|collaborator-last)"
      # We didn't apply the "waiting on response" label manually.
      - label: "!status: waiting on response"

  pr-ready-to-merge:
    name: "PRs ready to merge"
    resolution: |
        Please check if these PRs can be merged.

        Make sure all checks have passed and that a team member or other
        appropriate reviewer has approved the PR.

    type: pull_request
    filters:
      # TODO: test these filters on PRs from project members/owners
      # Match all approved PRs.  But this could be approval from anyone, so
      # extra scrutiny may be required.
      - tag: "approved"

  # TODO: add labels for checks (GitHub Actions)
  # TODO: split this into PRs that have passed checks and those that haven't
  pr-needs-review:
    name: "PRs ready for review"
    resolution: |
        Please review.

        If something is unclear, consider asking the author to clarify things
        for you, either in review comments or by adding comments to their code.

        You can manually add the "status: waiting for response" label if you
        haven't had a reply in a while.  This will start the timer for the PR
        to be closed after several days.

        If you aren't getting replies to your feedback, you can also choose to
        re-implement what the contributor has sent in a different way.  But do
        not copy their code and merge it as your own, as this would strip the
        original author of credit for their work.

        If you want to keep the original implementation, but make small changes
        to it, you can edit the PR before merging it:
          1. Go to the "Files changed" tab of the PR
          2. Click the overflow menu on the right side of the diff
          3. Click "Edit file"
          4. Leave comments in the PR to explain your change to the author

    type: pull_request
    filters:
      # TODO: test these filters on PRs from project members/owners
      # The PR has new commits since the last member response (new-commits), or
      # the author has responded more recently than any member of the project
      # (recv or recv-q), or the PR has not been reviewed (unreviewed).
      - tag: "(new-commits|recv|recv-q|unreviewed)"
      # In this category, only match PRs which have not been approved yet.
      - tag: "!approved"

  assigned-issues:
    name: "Assigned issues"
    resolution: |
        These issues are already assigned to someone.

        Is the issue assigned to you?  If there's nothing more urgent, try to
        finish what you started.

        Is the issue assigned to someone else?  Are they actually working on it?
        Ask them if they are still engaged on the issue, and unassign it if they
        are not.

    type: issue
    filters:
      - label: "!type: (enhancement|external)"
      - label: "!status: .*"
      - tag: "assigned"

  unassigned-p0-issues:
    name: "Unassigned P0 issues"
    resolution: *bug-resolution-text
    type: issue
    filters:
      - label: "!type: (enhancement|external)"
      - label: "priority: P0"
      - label: "!status: .*"
      - tag: "!assigned"

  unassigned-p1-issues:
    name: "Unassigned P1 issues"
    resolution: *bug-resolution-text
    type: issue
    filters:
      - label: "!type: (enhancement|external)"
      - label: "priority: P1"
      - label: "!status: .*"
      - tag: "!assigned"

  unassigned-p2-issues:
    name: "Unassigned P2 issues"
    resolution: *bug-resolution-text
    type: issue
    filters:
      - label: "!type: (enhancement|external)"
      - label: "priority: P2"
      - label: "!status: .*"
      - tag: "!assigned"

  unassigned-p3-issues:
    name: "Unassigned P3 issues"
    resolution: *bug-resolution-text
    type: issue
    filters:
      - label: "!type: (enhancement|external)"
      - label: "priority: P3"
      - label: "!status: .*"
      - tag: "!assigned"

  unassigned-p4-issues:
    name: "Unassigned P4 issues"
    resolution: *bug-resolution-text
    type: issue
    filters:
      - label: "!type: (enhancement|external)"
      - label: "priority: P4"
      - label: "!status: .*"
      - tag: "!assigned"

  issues-maybe-ready-to-close:
    name: "Issues that might be ready to close"
    resolution: |
        Please check if the issue should be closed.  Use your best judgement.
        
        Possible outcomes:
          • Remove the status, if it's wrong
          • Leave open for further discussion or consideration, if we're not sure
          • Close, referencing the status

    type: issue
    filters:
      # Has a status...
      - label: "status: .*"
      # But not one of these.  Any other status label is usually followed by
      # closing an issue (eventually).  So once in a while, we should check to
      # see if it's time to close these issues.
      - label: "!status: (archived|waiting on response)"

  # TODO: Add multiple-types to the weekly list once there is a way to do it.
  # See https://github.com/google/triage-party/issues/274
  #multiple-types:
  #  name: "Issues with more than one type"
  #  resolution: "Choose a specific type for this issue."
  #  type: issue
  #  filters:

  announcements:
    name: "Announcements"
    resolution: "Please close if the announcement is no longer relevant."
    type: issue
    filters:
      - label: "type: announcement"

  recently-closed-issues:
    name: "Recently closed issues"
    type: issue
    filters:
      - state: closed
      - closed: -90d
